{"version":3,"sources":["Main.js"],"names":[],"mappings":"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","file":"Main-compiled.js","sourcesContent":["require('normalize.css/normalize.css');\nrequire('styles/App.css');\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nvar imageDatas = require('../data/imageData.json');\n\n//取区间值方法\nvar getRangeRandom = (low, high) => Math.floor(Math.random() * (high - low) + low);   //这个以后可以通用\n//获取0~30°之间的一个任意正负值\nvar get30DegRandom = () => (Math.random() > 0.5 ? '' : '-') + Math.floor(Math.random() * 30);\nimageDatas = (function (imagesNum) {\n  for (var i = imagesNum.length; i--;) {\n    var imageInfo = imagesNum[i];\n    imageInfo.imageUrl = require('../images/' + imageInfo.fileName);   //给当前对象赋值添加imageName属性\n    imagesNum[i] = imageInfo;   //重新定义json数据的对象，分别给加了一个imageUrl属性\n  }\n  return imagesNum;\n})(imageDatas);\n\nclass ImgFigure extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);   //这句我没有搞懂--好像是下边娶不到ImgFigure是第几个，所以需要绑定一下\n  }\n  handleClick(e) {\n    if(this.props.arrange.isCenter) {\n      this.props.inverse();\n    } else {\n      this.props.center();\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  render() {\n    //初始化最开始的位置\n    var styleObj = {};\n\n    //通过props属性得到给分配到的 this.state.imgsArrangeArr[i] = arrange\n    if(this.props.arrange.pos) {\n      styleObj = this.props.arrange.pos;\n    }\n    if(this.props.arrange.rotate) {\n      (['MozTransform', 'msTransform', 'WebkitTransform', 'transform']).forEach((value) => {\n        styleObj[value] = 'rotate(' + this.props.arrange.rotate + 'deg)';\n      })\n    }\n    if(this.props.arrange.isCenter) {\n      styleObj.zIndex = 11;\n    }\n    let imgFigureClassName = 'img-figure';\n    imgFigureClassName += this.props.arrange.isInverse ? ' is-inverse' : '';\n\n    return (\n      <figure className={ imgFigureClassName } style={styleObj} onClick={this.handleClick}>   {/*这个style可以直接是一个对象*/}\n        <img src={this.props.data.imageUrl}\n             alt={this.props.data.title}/>\n        <figcaption>\n          <h2 className=\"img-title\">{this.props.data.title}\n          </h2>\n          <div className=\"img-back\" onClick={this.handleClick}>  {/*正反两面*/}\n            <p>\n              {this.props.data.desc}\n            </p>\n          </div>\n        </figcaption>\n      </figure>\n    )\n  }\n}\n\n//大管家-操作都在这里\nclass AppComponent extends React.Component {\n  //设置模型\n  constructor(props) {\n    super(props);   //引用超类的constructor属性，因为这个是扩展，所以必须要写上这个\n\n    //整体范围模型\n    this.Constant = {\n      centerPos: {\n        left: 0,\n        right: 0\n      },\n      //水平方向的取值范围\n      hPosRange: {\n        leftSecX: [0, 0],\n        rightSecX: [0, 0],\n        y: [0, 0]\n      },\n      //垂直方向的取值范围\n      vPosRange: {\n        x: [0, 0],\n        topY: [0, 0]\n      }\n    };\n\n    //初始状态state 代替以前的getInitialState\n    this.state = {\n      imgsArrangeArr:[\n\n        //形如下边这样\n        //   {\n        //   pos:{\n        //     left:'0',\n        //     top:'0'\n        //   },\n        //  rotate:'0',\n        //  isInverse: false,  //图片正反面\n        //  isCenter: false //图片是否居中\n        // }\n      ]\n    }\n  }\n\n  inverse(index) {\n    return () => {\n      let imgsArrangeArr = this.state.imgsArrangeArr;\n\n      imgsArrangeArr[index].isInverse = !imgsArrangeArr[index].isInverse;\n      this.setState({\n        imgsArrangeArr: imgsArrangeArr\n      })\n    };\n  }\n\n  // 页面加载后计算好位置\n  componentDidMount(){\n\n    // 首先拿到舞台大小\n    var stageDom = ReactDOM.findDOMNode(this.refs.stage),\n      stageW = stageDom.scrollWidth,\n      stageH = stageDom.scrollHeight,\n      halfStageW = Math.floor(stageW / 2),\n      halfStageH = Math.floor(stageH / 2);\n\n    // 拿到每张图的大小\n    var imgFigureDOM = ReactDOM.findDOMNode(this.refs.imgFigure0),\n        imgW = imgFigureDOM.scrollWidth,\n        imgH = imgFigureDOM.scrollHeight,\n        halfImgW = Math.floor(imgW / 2),\n        halfImgH = Math.floor(imgH / 2);\n\n    // 页面加载后 中间图片 的位置\n    this.Constant.centerPos = {\n      left: halfStageW - halfImgW,\n      top: halfStageH - halfImgH\n    };\n    //计算左侧右侧图片区域排布位置的取值范围--极限值\n    this.Constant.hPosRange.leftSecX[0] = -halfImgW;\n    this.Constant.hPosRange.leftSecX[1] = halfStageW - halfImgW * 3;\n\n    this.Constant.hPosRange.rightSecX[0] = halfStageW + halfImgW;\n    this.Constant.hPosRange.rightSecX[1] = stageW - halfImgW;\n\n    this.Constant.hPosRange.y[0] = -halfImgH;\n    this.Constant.hPosRange.y[1] = stageH - halfImgH;\n\n    //计算垂直排布位置的取值范围--极限值\n    this.Constant.vPosRange.topY[0] = -halfImgH;\n    this.Constant.vPosRange.topY[1] = halfStageH - halfImgH * 3;\n\n    this.Constant.vPosRange.x[0] = halfImgW - imgW;\n    this.Constant.vPosRange.x[1] = halfImgW;\n\n    this.rearrange(0);      //全部绑定到this上\n    //上边的都是极限值\n    // let num = Math.floor(Math.random() * 10);\n    // // this.rearrange(num);\n    // this.rearrange(num);\n  }\n\n  rearrange(centerIndex){\n    //重新排布图片\n\n    //先取到图片坐标数组\n    var imgsArrangeArr = this.state.imgsArrangeArr,\n      Constant = this.Constant,\n      centerPos = Constant.centerPos,\n      hPosRange = Constant.hPosRange,\n      vPosRange = Constant.vPosRange,\n      hPosRangeLeftSecX = hPosRange.leftSecX,\n      hPosRangeRightSecX = hPosRange.rightSecX,\n      hPosRangeY = hPosRange.y,\n      vPosRangeTopY = vPosRange.topY,\n      vPosRangeX = vPosRange.x,\n      imgsArrangeTopArr = [],       //存储上部图片信息\n      topImgNum = Math.floor(Math.random() * 2),  //取0个或者1个随机\n      topImgSpliceIndex = 0,                  //给上边图像做一个标记，看是从数组的哪个位置取出来的\n      imgsArrangeCenterArr  = imgsArrangeArr.splice(centerIndex, 1);    //取出那个居中的值的数据，返回被提取出来的这个中心图片的信息\n\n    //首先居中 centerIndex 的图片\n    imgsArrangeCenterArr[0] = {\n      pos: centerPos,\n      rotate:'0',\n      isCenter: true\n    }\n\n    //取出要布局上侧的图片的状态信息\n    topImgSpliceIndex = Math.floor(Math.random() * (imgsArrangeArr.length - topImgNum));\n    imgsArrangeTopArr = imgsArrangeArr.splice(topImgSpliceIndex, topImgNum);\n\n      //布局位于上侧的图片\n    imgsArrangeTopArr.forEach(function(value, index) {        //遍历上边取出的几张图片--分别给他们设置坐标\n      imgsArrangeTopArr[index] = {\n        pos: {\n          top: getRangeRandom(vPosRangeTopY[0], vPosRangeTopY[1]),      //getRangeRandom这个在上边我们定义一个方法，来随机去除一个值的方法\n          left: getRangeRandom(vPosRangeX[0], vPosRangeX[1])\n        },\n        rotate: get30DegRandom(),\n        isCenter: false\n\n      };\n    });\n\n    //布局左右两侧的图片\n    for(var i = 0, j = imgsArrangeArr.length, k = j / 2; i < j; i ++) {    //主要为了分两半，小于i<k的是左侧 i>k的是右侧\n      let hPosRangeLORX = null;\n      //前半部分布局左边,右半部分布局右边\n      if(i < k) {\n        hPosRangeLORX = hPosRangeLeftSecX;    //这是一个x区间数组\n      } else {\n        hPosRangeLORX = hPosRangeRightSecX;   //这是一个x区间数组\n      }\n\n      imgsArrangeArr[i] = {\n        pos: {\n          top: getRangeRandom(hPosRangeY[0], hPosRangeY[1]),\n          left: getRangeRandom(hPosRangeLORX[0], hPosRangeLORX[1])\n        },\n        rotate: get30DegRandom(),\n        isCenter: false\n      }\n    }\n\n    //因为下一次点击的话 还是要从新计算，所以还要将imgsArrangeArr 恢复回去\n    if(imgsArrangeTopArr && imgsArrangeTopArr[0]) {     //假如上部取到值了\n\n      //将上边图片插回去\n      imgsArrangeArr.splice(topImgSpliceIndex, 0, imgsArrangeTopArr[0]);\n    }\n\n    //将中间图像插回去\n    imgsArrangeArr.splice(centerIndex, 0, imgsArrangeCenterArr[0]);\n\n    //触发重新渲染---★\n    this.setState({\n      imgsArrangeArr: imgsArrangeArr\n    });\n\n  }\n\n  center(index) {\n    return () => {\n      this.rearrange(index);\n    }\n  }\n\n  render() {\n    var controllerUnits = [],\n      imgFigures = [];  //放列表的数组\n    imageDatas.forEach(function (value, i) {\n      if(!this.state.imgsArrangeArr[i]){    //如果当前土坯那没有初始位置则给他个初始位置\n        this.state.imgsArrangeArr[i] = {\n          pos: {\n            left: 0,\n            top: 0\n          },\n          rotate: 0,\n          isInverse: false,\n          isCenter: false //图片是否居中\n        }\n      }\n      imgFigures.push(<ImgFigure key={i} data={value} ref={'imgFigure'+i} arrange={this.state.imgsArrangeArr[i]} inverse={this.inverse(i)} center={this.center(i)} />);  // 这个arrange带有每张图片的状态信息\n      //console.log(value.imageUrl)\n    }.bind(this));\n\n    return (\n      <section className=\"stage\" ref=\"stage\">\n        <section className=\"img-sec\">\n          {imgFigures}\n        </section>\n        <nav className=\"controller-nav\">\n\n        </nav>\n      </section>\n    );\n  }\n}\n\nAppComponent.defaultProps = {};\n\nexport {AppComponent};\n"]}