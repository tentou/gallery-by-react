{"version":3,"sources":["Main.js"],"names":[],"mappings":"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","file":"Main-compiled.js","sourcesContent":["require('normalize.css/normalize.css');\nrequire('styles/App.css');\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// let yeomanImage = require('../images/yeoman.png');\n\nvar imageDatas = require('../data/imageData.json');\n\n/**\n *获取图片相关的数据\n *利用自执行函数,将图片信息转换成图片URL路径信息\n */\nimageDatas = (function genImageURL(imageDatasArr) {\n    for(let i = 0; i < imageDatasArr.length; i ++) {\n        var singleImageData = imageDatasArr[i];\n\n        singleImageData.imageURL = require('../images/' + singleImageData.fileName);\n        imageDatasArr[i] = singleImageData;\n    }\n    return imageDatasArr;\n})(imageDatas);\n\n//获取区间内的随机值\nvar getRangeRandom = (low, high) => Math.floor(Math.random() * (high - low) + low);\n\n//获取0~30°之间的一个任意正负值\nvar get30DegRandom = () => (Math.random() > 0.5 ? '' : '-') + Math.floor(Math.random() * 30);\n\nclass ImgFigure extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * imgFigure的点击处理函数\n     */\n\n    handleClick(e) {\n\n        if(this.props.arrange.isCenter) {\n            this.props.inverse();\n        } else {\n            this.props.center();\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    render() {\n        var styleObj = {};\n\n        //如果props属性中制定了这张图片的位置,则使用\n        if(this.props.arrange.pos) {\n            styleObj = this.props.arrange.pos;\n        }\n\n        //如果图片的旋转角度有值并且不为0,添加旋转角度\n        if(this.props.arrange.rotate) {\n            (['MozTransform', 'msTransform', 'WebkitTransform', 'transform']).forEach((value) => {\n                styleObj[value] = 'rotate(' + this.props.arrange.rotate + 'deg)';\n            })\n        }\n\n        if(this.props.arrange.isCenter) {\n            styleObj.zIndex = 11;\n        }\n\n        let imgFigureClassName = 'img-figure';\n            imgFigureClassName += this.props.arrange.isInverse ? ' is-inverse' : '';\n\n        return (\n            <figure className={ imgFigureClassName } style={styleObj} onClick={this.handleClick}>\n                <img src={this.props.data.imageURL}\n                     alt={this.props.data.title}/>\n                <figcaption>\n                    <h2 className=\"img-title\">{this.props.data.title}</h2>\n                    <div className=\"img-back\" onClick={this.handleClick}>\n                        <p>\n                            {this.props.data.desc}\n                        </p>\n                    </div>\n                </figcaption>\n            </figure>\n        );\n    }\n}\n\n\n//控制组件\nclass ControllerUnit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(e) {\n        //如果点击的是当前正在选中的按钮,则翻转图片,否则将对应的图片居中\n        if(this.props.arrange.isCenter) {\n            this.props.inverse();\n        } else {\n            this.props.center();\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    render() {\n        var controllerUnitClassName = 'controller-unit';\n\n        //如果对应的居中的图片,显示控制按钮的剧中态\n        if(this.props.arrange.isCenter) {\n            controllerUnitClassName += ' is-center';\n\n            //如果对应的是翻转图片,显示控制状态的翻转状态\n            if(this.props.arrange.isInverse) {\n                controllerUnitClassName += ' is-inverse';\n            }\n        }\n\n        return (\n            <span className={ controllerUnitClassName } onClick={this.handleClick}></span>\n        );\n    }\n}\n\nclass AppComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.Constant = {\n            centerPos: {\n                left: 0,\n                right: 0\n            },\n            //水平方向的取值范围\n            hPosRange: {\n                leftSecX: [0, 0],\n                rightSecX: [0, 0],\n                y: [0, 0]\n            },\n            //垂直方向的取值范围\n            vPosRange: {\n                x: [0, 0],\n                topY: [0, 0]\n            }\n        };\n\n        this.state = {\n            imgsArrangeArr: [\n                /**\n                 *  {\n                 *      pos: {\n                 *          left: '0',\n                 *          top: '0'\n                 *      },\n                 *      rotate: 0,\n                 *      isInverse: false,  //图片正反面\n                 *      isCenter: false //图片是否居中\n                 *  }\n                 */\n            ]\n        };\n    }\n\n    /**\n     * 翻转图片\n     * @param index 输入当前被执行inverse操作的图片对应的图片信息数组的index值\n     * @return {Function} 这是一个闭包函数,其内return一个真正待被执行的函数\n     */\n\n    inverse(index) {\n        return () => {\n            let imgsArrangeArr = this.state.imgsArrangeArr;\n\n            imgsArrangeArr[index].isInverse = !imgsArrangeArr[index].isInverse;\n            this.setState({\n                imgsArrangeArr: imgsArrangeArr\n            })\n        }\n    }\n\n    //组件加载以后,为每张图片计算其位置的范围\n    componentDidMount() {\n        //首先拿到舞台的大小\n        var stageDom = ReactDOM.findDOMNode(this.refs.stage),\n            // let stageDom = this.refs.stage,\n            stageW = stageDom.scrollWidth,\n            stageH = stageDom.scrollHeight,\n\n\n            halfStageW = Math.floor(stageW / 2),\n            halfStageH = Math.floor(stageH / 2);\n\n        var imgFigureDOM = ReactDOM.findDOMNode(this.refs.imgFigure0),\n            imgW = imgFigureDOM.scrollWidth,\n            imgH = imgFigureDOM.scrollHeight,\n            halfImgW = Math.floor(imgW / 2),\n            halfImgH = Math.floor(imgH / 2);\n        /**\n         * 计算中心图片的位置点\n         */\n        this.Constant.centerPos = {\n            left: halfStageW - halfImgW,\n            top: halfStageH - halfImgH\n        };\n\n        //计算左侧右侧图片区域排布位置的取值范围\n        this.Constant.hPosRange.leftSecX[0] = -halfImgW;\n        this.Constant.hPosRange.leftSecX[1] = halfStageW - halfImgW * 3;\n\n        this.Constant.hPosRange.rightSecX[0] = halfStageW + halfImgW;\n        this.Constant.hPosRange.rightSecX[1] = stageW - halfImgW;\n\n        this.Constant.hPosRange.y[0] = -halfImgH;\n        this.Constant.hPosRange.y[1] = stageH - halfImgH;\n\n        //计算左侧右侧图片区域排布位置的取值范围\n        this.Constant.vPosRange.topY[0] = -halfImgH;\n        this.Constant.vPosRange.topY[1] = halfStageH - halfImgH * 3;\n\n        this.Constant.vPosRange.x[0] = halfImgW - imgW;\n        this.Constant.vPosRange.x[1] = halfImgW;\n        let num = Math.floor(Math.random() * 10);\n        // this.rearrange(num);\n        this.rearrange(num);\n    }\n\n    /**\n     *重新布局所有图片\n     *@param: centerIndex 指定居中排布那个图片\n     */\n    rearrange(centerIndex) {\n        var imgsArrangeArr = this.state.imgsArrangeArr,\n            Constant = this.Constant,\n            centerPos = Constant.centerPos,\n            hPosRange = Constant.hPosRange,\n            vPosRange = Constant.vPosRange,\n            hPosRangeLeftSecX = hPosRange.leftSecX,\n            hPosRangeRightSecX = hPosRange.rightSecX,\n            hPosRangeY = hPosRange.y,\n            vPosRangeTopY = vPosRange.topY,\n            vPosRangeX = vPosRange.x,\n\n            imgsArrangeTopArr = [],\n            topImgNum = Math.floor(Math.random() * 2),\n            topImgSpliceIndex = 0,\n            imgsArrangeCenterArr  = imgsArrangeArr.splice(centerIndex, 1);\n\n        //首先居中centerIndex的图片,居中的centerIndex的图片不需要旋转\n        imgsArrangeCenterArr[0] = {\n            pos: centerPos,\n            rotate: 0,\n            isCenter: true\n        };\n\n        //取出要布局上侧的图片的状态信息\n        topImgSpliceIndex = Math.floor(Math.random() * (imgsArrangeArr.length - topImgNum));\n\n        imgsArrangeTopArr = imgsArrangeArr.splice(topImgSpliceIndex, topImgNum);\n        //布局位于上侧的图片\n        imgsArrangeTopArr.forEach(function(value, index) {\n            imgsArrangeTopArr[index] = {\n                pos: {\n                    top: getRangeRandom(vPosRangeTopY[0], vPosRangeTopY[1]),\n                    left: getRangeRandom(vPosRangeX[0], vPosRangeX[1])\n                },\n                rotate: get30DegRandom(),\n                isCenter: false\n            };\n\n            imgsArrangeTopArr[index].pos = {\n                top: getRangeRandom(vPosRangeTopY[0], vPosRangeTopY[1]),\n                left: getRangeRandom(vPosRangeX[0], vPosRangeX[1])\n            }\n        });\n\n        //布局左右两侧的图片\n        for(var i = 0, j = imgsArrangeArr.length, k = j / 2; i < j; i ++) {\n            let hPosRangeLORX = null;\n            //前半部分布局左边,右半部分布局右边\n            if(i < k) {\n                hPosRangeLORX = hPosRangeLeftSecX;\n            } else {\n                hPosRangeLORX = hPosRangeRightSecX;\n            }\n\n            imgsArrangeArr[i] = {\n                pos: {\n                    top: getRangeRandom(hPosRangeY[0], hPosRangeY[1]),\n                    left: getRangeRandom(hPosRangeLORX[0], hPosRangeLORX[1])\n                },\n                rotate: get30DegRandom(),\n                isCenter: false\n            }\n        }\n        if(imgsArrangeTopArr && imgsArrangeTopArr[0]) {\n            imgsArrangeArr.splice(topImgSpliceIndex, 0, imgsArrangeTopArr[0]);\n        }\n        imgsArrangeArr.splice(centerIndex, 0, imgsArrangeCenterArr[0]);\n\n        this.setState({\n            imgsArrangeArr: imgsArrangeArr\n        });\n    }\n\n    /**\n     * 利用 rearrange函数, 居中对应index的图片\n     * @param index,需要被居中的图片对应的图片信息数组的index值\n     * @return {function}\n     */\n\n    center(index) {\n        return () => {\n            this.rearrange(index);\n        }\n    }\n\n    // getInitialState() {\n    //     return {\n    //         imgsArrangeArr: []\n    //     };\n    // }\n\n    render() {\n        var controllerUnits = [];\n        var imgFigures = [];\n\n        imageDatas.map((value, index) => {\n            if(!this.state.imgsArrangeArr[index]) {\n                this.state.imgsArrangeArr[index] = {\n                    pos: {\n                        left: 0,\n                        top: 0\n                    },\n                    rotate: 0,\n                    isInverse: false,\n                    isCenter: false\n                }\n            }\n            imgFigures.push(<ImgFigure data={value} key={index} ref={'imgFigure' + index}\n                                       arrange={this.state.imgsArrangeArr[index]}\n                                       inverse={this.inverse(index)}\n                                       center={this.center(index)}/>);\n            controllerUnits.push(<ControllerUnit key={index} arrange={this.state.imgsArrangeArr[index]}\n                                        inverse={this.inverse(index)}\n                                        center={this.center(index)}/>);\n        });\n\n        return (\n        <section className=\"stage\" ref=\"stage\">\n            <section className=\"img-sec\">\n                {imgFigures}\n            </section>\n            <nav className=\"controller-nav\">\n                {controllerUnits}\n            </nav>\n        </section>\n        );\n    }\n}\n\nAppComponent.defaultProps = {\n};\n\nexport default AppComponent;\n"]}